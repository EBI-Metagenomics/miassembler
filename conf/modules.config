/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: 'FETCHTOOL_READS' {
        ext.args = params.private_study ? "--private" : ""
    }


    /************/
    /* READS_QC */
    /************/

    withName: 'FASTQC' {
        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                saveAs: {
                    filename -> {
                        if ( filename.equals('versions.yml') ) {
                            return null;
                        }
                        def output_file = new File(filename);
                        return "${study_reads_folder( meta )}/qc/fastqc/${output_file.name}";
                    }
                }
            ]
        ]
    }

    withName: 'FASTP' {
        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                saveAs: {
                    filename -> {
                        if ( filename.equals('versions.yml') ) {
                            return null;
                        }
                        def file_patterns_to_publish = [
                            'fastp.log',
                            'fastp.html',
                            'fastp.json'
                        ]
                        def output_file = new File(filename);
                        if ( file_patterns_to_publish.any { output_file.name.contains(it) } ) {
                            return "${study_reads_folder( meta )}/qc/fastp/${output_file.name}";
                        }
                        return null;
                    }
                }
            ]
        ]
    }

    withName: 'FASTP_LR' {
        ext.args = [
            '--average_qual',
            '10',
            '--length_required',
            "${params.long_reads_min_read_length}",
            '--disable_adapter_trimming'
        ].join(' ').trim()
    }

    withName: 'BWAMEM2DECONTNOBAMS' {
        // BWAMEM2 is a bit wonky so we will retry regarless of the exit code
        errorStrategy = 'retry'
        maxRetries = 2

        cpus   = { 2     * task.attempt }
        time   = { 8.h   * task.attempt }
        ext.prefix = "decontaminated"
    }

    withName: 'HUMAN_PHIX_DECONTAMINATION' {
        memory = { 64.GB + ( 64.GB * 0.5 * ( task.attempt - 1 ) ) }
    }

    withName: 'HOST_DECONTAMINATION' {
        memory = { 24.GB + ( 24.GB * 0.5 * ( task.attempt - 1 ) ) }
    }

    withName: 'MINIMAP2_ALIGN' {
        errorStrategy = 'retry'
        maxRetries = 2

        memory = { 64.GB + ( 64.GB * 0.5 * ( task.attempt - 1 ) ) }
    }

    withName: 'CANU*' {
        ext.args = [
            '-trim',
            '-corrected',
            'corMinCoverage=0',
            'stopOnLowCoverage=0',
            'minInputCoverage=0',
            'maxInputCoverage=10000',
            'corOutCoverage=all',
            'corMhapSensitivity=low',
            'corMaxEvidenceCoverageLocal=10',
            'corMaxEvidenceCoverageGlobal=10',
            'oeaMemory=10',
            'redMemory=10',
            'batMemory=10',
            'corThreads=4'
        ].join(' ').trim()

        memory = { 120.GB + ( 120.GB * 0.5 * ( task.attempt - 1 ) ) }
        time   = { 24.h * task.attempt }
    }

    withName: 'CANU_ONT' {
        ext.args2 = [
            'correctedErrorRate=0.16',
        ].join(' ').trim()
    }

    withName: 'CANU_PACBIO' {
        ext.args2 = [
            'correctedErrorRate=0.105',
        ].join(' ').trim()
    }


    /************/
    /* ASSEMBLY */
    /************/

    withName: 'SPADES' {
        // We increase the memory 50% with each try
        memory = {
            def assembly_memory = meta.assembly_memory ?: params.assembly_memory;
            assembly_memory.GB + ( assembly_memory.GB * 0.5 * ( task.attempt - 1 ) )
        }
        cpus   = { 32 * task.attempt }
        // TODO: tweak this based on input ( using the biome maybe? )
        time   = { 168.h * task.attempt }
        ext.args = params.spades_only_assembler ? "--only-assembler" : ""
        errorStrategy = 'retry'
        maxRetries    = params.max_spades_retries

        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                saveAs: {
                    filename -> {
                        if ( filename.equals('versions.yml') ) {
                            return null;
                        }
                        def file_patterns_to_publish = [
                            'params.txt',
                            'graph.fastg',
                            'contigs.fa.gz',
                            'scaffolds.fa.gz',
                            'graph_with_scaffolds.gfa.gz'
                        ]
                        def output_file = new File(filename);
                        if ( file_patterns_to_publish.any { output_file.name.contains(it) } ) {
                            return "${study_reads_folder( meta )}/assembly/${meta.assembler}/${meta.assembler_version}/${output_file.name}";
                        }
                        return null;
                    }
                }
            ]
        ]
    }

    withName: 'MEGAHIT' {
        memory = {
            def assembly_memory = meta.assembly_memory ?: params.assembly_memory;
            assembly_memory.GB + ( assembly_memory.GB * 0.5 * ( task.attempt - 1 ) )
        }
        errorStrategy = 'retry'
        maxRetries    = params.max_megahit_retries

        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "megahit_out/*.fa*.gz",
                saveAs: {
                    filename -> {
                        def output_file = new File(filename);
                        return "${study_reads_folder( meta )}/assembly/${meta.assembler}/${meta.assembler_version}/${output_file.name}";
                    }
                }
            ]
        ]
    }

    withName: 'FLYE' {
        memory = {
            def assembly_memory = meta.assembly_memory ?: params.assembly_memory;
            assembly_memory.GB + ( assembly_memory.GB * 0.5 * ( task.attempt - 1 ) )
        }

        ext.args = '--meta'

        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                saveAs: {
                    filename -> {
                        if ( filename.equals('versions.yml') ) {
                            return null;
                        }
                        def file_patterns_to_publish = [
                            'params.json',
                            'graph_final.fasta',
                            'assembly.fasta.gz'
                        ]
                        def output_file = new File(filename);
                        if ( file_patterns_to_publish.any { output_file.name.contains(it) } ) {
                            return "${study_reads_folder( meta )}/assembly/${meta.assembler}/${meta.assembler_version}/${output_file.name}";
                        }
                        return null;
                    }
                }
            ]
        ]
    }


    /*****************************************/
    /* POST-ASSEMBLY POLISHING - SHORT READS */
    /*****************************************/

    withName: 'BLAST_BLASTN*' {
        ext.args = [
            '-task',
            'megablast',
            '-word_size',
            '28',
            '-best_hit_overhang',
            '0.1',
            '-best_hit_score_edge',
            '0.1',
            '-dust',
            'yes',
            '-evalue',
            '0.0001',
            '-min_raw_gapped_score',
            '100',
            '-penalty',
            '-5',
            '-perc_identity',
            '80.0',
            '-soft_masking',
            'true',
            '-window_size',
            '100',
            '-outfmt',
            '"6 qseqid"',
        ].join(' ').trim()

        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                saveAs: {
                    filename -> {
                        if ( filename.equals('versions.yml') ) {
                            return null;
                        }
                        def output_file = new File(filename);
                        return "${study_reads_folder( meta )}/assembly/${meta.assembler}/${meta.assembler_version}/decontamination/${output_file.name}";
                    }
                }
            ]
        ]
    }

    withName: 'SEQKIT_GREP' {
        ext.args = "--invert-match"
    }


    /****************************************/
    /* POST-ASSEMBLY POLISHING - LONG READS */
    /****************************************/

    withName: 'RACON' {
        ext.args = [
            '--match',             // Score for matching bases
            '8',
            '--mismatch',          // Score for mismatching bases
            '-6',
            '--gap',               // gap penalty (must be negative)
            '-8',
            '--window-length',     // size of window on which POA is performed
            '500',
            '--quality-threshold', // threshold for average base quality of windows used in POA
            '-1'
        ].join(' ').trim()
    }

    withName: 'MEDAKA' {
        ext.args = "-m r941_min_sup_g507"       // model (optimised for generic execution)
    }

    withName: 'PROOVFRAME*' {
        // based on a test on a small assembly against NCBI_nr: 9 hours and 17 GB
        // double check if proovframe_map also needs this much memory
        memory = { 32.GB * 0.5 * (task.attempt + 1) }
        time   = { 16.h  * 0.5 * (task.attempt + 1) }
    }

    withName: 'PROOVFRAME_FIX' {
        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                saveAs: {
                    filename -> {
                        if ( filename.equals('versions.yml') ) {
                            return null;
                        }
                        def output_file = new File(filename);
                        return "${study_reads_folder( meta )}/assembly/${meta.assembler}/${meta.assembler_version}/${output_file.name}";
                    }
                }
            ]
        ]
    }

    withName: 'HIFIADAPTERFILT' {
        cpus   = { 1    * task.attempt }
        memory = { 6.GB * task.attempt }
        time   = { 4.h  * task.attempt }
    }


    /*******************/
    /* PUBLISH CONTIGS */
    /*******************/

    withName: 'PUBLISH_CLEANED_CONTIGS' {
        cpus   = { 1                     }
        memory = { 250.MB * task.attempt }
        time   = { 30.m   * task.attempt }
        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                saveAs: {
                    filename -> {
                        return "${study_reads_folder( meta )}/assembly/${meta.assembler}/${meta.assembler_version}/${filename}";
                    }
                }
            ]
        ]
    }


    /************/
    /* COVERAGE */
    /************/

    withName: 'BWAMEM2_MEM' {
        cpus   = { 12    * task.attempt }
        memory = { 20.GB * task.attempt }
        time   = { 1.h  * task.attempt  }

        ext.args  = "-M"            // mark shorter split hits as secondary
        ext.args2 = "-F 268 -uS"
    }

    withName: 'BWAMEM2_INDEX' {
        memory = { 16.GB * task.attempt }
        time   = { 6.h  * task.attempt  }
    }

    withName: 'LONG_READS_COVERAGE' {
        errorStrategy = 'retry'
        maxRetries = 2

        memory = { 64.GB + ( 64.GB * 0.5 * ( task.attempt - 1 ) ) }

        ext.jgi_summarize_bam_contig_depths_args = ''

        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: '*.tsv.gz',
                saveAs: {
                    filename -> {
                        def output_file = new File(filename);
                        return "${study_reads_folder( meta )}/assembly/${meta.assembler}/${meta.assembler_version}/coverage/${output_file.name}";
                    }
                }
            ]
        ]
    }

    withName: 'SHORT_READS_COVERAGE' {
        ext.jgi_summarize_bam_contig_depths_args = ''

        ext.alignment_args = [
            "-q", "20",
            "-Sb",
            "-F", "4"
        ].join(' ')

        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: '*.tsv.gz',
                saveAs: {
                    filename -> {
                        def output_file = new File(filename);
                        return "${study_reads_folder( meta )}/assembly/${meta.assembler}/${meta.assembler_version}/coverage/${output_file.name}";
                    }
                }
            ]
        ]
    }

    withName: 'CALCULATE_ASSEMBLY_COVERAGE' {
        cpus   = { 1      * task.attempt }
        memory = { 100.MB * task.attempt }
        time   = { 30.m   * task.attempt }
        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                pattern: "*.json",
                saveAs: {
                    filename -> {
                        def output_file = new File(filename);
                        return "${study_reads_folder( meta )}/assembly/${meta.assembler}/${meta.assembler_version}/coverage/${output_file.name}";
                    }
                }
            ]
        ]
    }


    /***************/
    /* FINAL STEPS */
    /***************/

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            [
                path: "${params.outdir}/pipeline_info",
                mode: params.publish_dir_mode,
                pattern: '*_versions.yml'
            ]
        ]
    }

    withName: 'MULTIQC_STUDY' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }

        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                saveAs: {
                    filename -> {
                        if ( filename.equals('versions.yml') ) {
                            return null;
                        }
                        def output_file = new File(filename);
                        return "${study_folder( meta )}/multiqc/${output_file.name}";
                    }
                }
            ]
        ]
    }

    withName: 'MULTIQC_RUN' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }

        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                saveAs: {
                    filename -> {
                        if ( filename.equals('versions.yml') ) {
                            return null;
                        }
                        def output_file = new File(filename);
                        return "${study_reads_folder( meta )}/assembly/${meta.assembler}/${meta.assembler_version}/qc/multiqc/${output_file.name}";
                    }
                }
            ]
        ]
    }

    withName: 'QUAST' {
        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true,
                saveAs: {
                    filename -> {
                        if ( filename.equals('versions.yml') ) {
                            return null;
                        }
                        def output_file = new File(filename);
                        return "${study_reads_folder( meta )}/assembly/${meta.assembler}/${meta.assembler_version}/qc/quast/${output_file.name}";
                    }
                }
            ]
        ]
        // Disable Quast reference download
        // NOTICE: Maximum number of references (--max-ref-number) is set to 0, search in SILVA 16S rRNA database is disabled //
        ext.args = "--max-ref-num 0"
    }
}
