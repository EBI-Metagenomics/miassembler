/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: 'SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FETCHTOOL*' {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }

        ext.args = params.private_study ? "--private" : ""
    }

    withName: 'FASTP' {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
        publishDir = [
            [
                path: "${params.outdir}/qc/fastp",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*fastp.log"
            ],
            [
                path: "${params.outdir}/qc/fastp",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*fastp.html"
            ],
            [
                path: "${params.outdir}/qc/fastp",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*fastp.json"
            ]
        ]
    }
    withName: 'FASTQC' {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
        publishDir = [
            [
                path: "${params.outdir}/qc/fastqc",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
        ]
    }

    withName: 'BWAMEM2_MEM' {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }

        ext.args  = "-M"
        ext.args2 = [
            '-f',
            '12',
            '-F',
            '256',
            '-uS',
        ].join(' ').trim()
    }

    withName: 'SAMTOOLS_BAM2FQ' {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
        ext.prefix = "decontaminated"
    }

    withName: 'SPADES' {
        ext.args = params.spades_only_assembler ? "--only-assembler" : ""

        memory = { "$params.assembly_memory" + ".GB" * task.attempt }
        cpus   = 32
        publishDir = [
            [
                path: "${params.outdir}/assembly/spades/${params.spades_version}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "params.txt*"

            ],
            [
                path: "${params.outdir}/assembly/spades/${params.spades_version}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*graph.fastg*"
            ],
            [
                path: "${params.outdir}/assembly/spades/${params.spades_version}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*contigs.fa.gz"
            ],
            [
                path: "${params.outdir}/assembly/spades/${params.spades_version}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*scaffolds.fa.gz"
            ],
            [
                path: "${params.outdir}/assembly/spades/${params.spades_version}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*graph_with_scaffolds.gfa.gz"
            ]
        ]
    }

    withName: 'MEGAHIT' {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
        publishDir = [
            [
                path: "${params.outdir}/assembly/megahit/${params.megahit_version}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.fa*.gz"
            ],
        ]
    }

    withName: 'SEQKIT_SEQ' {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }

        ext.args = "--min-len $params.min_contig_length"
    }

    withName: 'BLAST_BLASTN*' {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }

        ext.args = [
            '-task',
            'megablast',
            '-word_size',
            '28',
            '-best_hit_overhang',
            '0.1',
            '-best_hit_score_edge',
            '0.1',
            '-dust',
            'yes',
            '-evalue',
            '0.0001',
            '-min_raw_gapped_score',
            '100',
            '-penalty',
            '-5',
            '-perc_identity',
            '80.0',
            '-soft_masking',
            'true',
            '-window_size',
            '100',
            '-outfmt',
            '"6 qseqid ppos"',
        ].join(' ').trim()
    }

    withName: 'SEQKIT_GREP' {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }

        ext.args = "--invert-match"
    }

    withName: 'BWAMEM2_INDEX' {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }

    withName: 'METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS' {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
        publishDir = [
            [
                path: "${params.outdir}/assembly/coverage",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.txt.gz"
            ],
        ]
    }

    withName: 'SAMTOOLS_IDXSTATS' {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }

        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MULTIQC' {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }

        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/assembly/qc/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUAST' {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }

        publishDir = [
            path: { "${params.outdir}/assembly/qc/quast" },
            mode: params.publish_dir_mode
        ]
    }
}
