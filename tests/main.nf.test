nextflow_pipeline {

    name "Test Workflow EBIMETAGENOMICS_MIASSEMBLER"
    script "main.nf"

    test("Samplesheet spades") {

        tag "samplesheet"
        tag "SR"

        when {
            params {
                assembler   = "spades"
                samplesheet = "${projectDir}/tests/samplesheet/test.csv"
            }
        }

        then {
            with(workflow) {
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 2
                assert trace.succeeded().count{ task -> task.name.contains("MEGAHIT") } == 1
            }
        }

    }

    test("Samplesheet - no assembled - reads filtered ") {

        tag "samplesheet"
        tag "SR"

        when {
            params {
                assembler                             = "spades"
                short_reads_low_reads_count_threshold = 1000000
                samplesheet                           = "${projectDir}/tests/samplesheet/test.csv"
            }
        }

        then {
            with(workflow) {
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("FASTQC_BEFORE") } == 3
                assert trace.succeeded().count{ task -> task.name.contains("FASTP") } == 3
                assert trace.succeeded().count{ task -> task.name.contains("HUMAN_PHIX_DECONTAMINATION") } == 3
                assert trace.succeeded().count{ task -> task.name.contains("FASTQC_AFTER") } == 3
                assert trace.succeeded().count{ task -> task.name.contains("CUSTOM_DUMPSOFTWAREVERSIONS") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("MULTIQC_STUDY") } == 2
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 0
                assert trace.succeeded().count{ task -> task.name.contains("MEGAHIT") } == 0
                // This process should not have been called
                assert trace.succeeded().count{ task -> task.name.contains("DOWNLOAD_FROM_FIRE") } == 0
            }
        }

    }

    test("metaSPAdes - paired end") {

        tag "ena-portal-api"
        tag "SR"

        when {

            params {
                // Force the assembly
                short_reads_filter_ratio_threshold   = 0.1
                short_reads_contig_threshold         = 1

                study_accession                      = "SRP115494"
                reads_accession                      = "SRR6180434"
            }
        }

        then {
            with (workflow) {
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("MEGAHIT") } == 0
                assert trace.succeeded().size() == 17
            }
        }

    }

    test("MEGAHIT - paired end") {

        tag "ena-portal-api"
        tag "SR"

        when {
            params {
                assembler                           = "megahit"

                // Force the assembly
                short_reads_filter_ratio_threshold  = 0.1

                study_accession                     = "SRP115494"
                reads_accession                     = "SRR6180434"
            }
        }

        then {
            with(workflow) {
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 0
                assert trace.succeeded().count{ task -> task.name.contains("MEGAHIT") } == 1
                assert trace.tasks().size() == 17            }
        }

    }

    test("metaSPAdes - too few contigs") {

        tag "ena-portal-api"
        tag "SR"

        when {

            params {
                // Force the assembly
                short_reads_filter_ratio_threshold   = 0.1

                study_accession                      = "SRP115494"
                reads_accession                      = "SRR6180434"
            }
        }

        then {
            with (workflow) {
                // Cleaned assembly should contain 1 contig which fails the contig threshold and the pipeline stops
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("MEGAHIT") } == 0
                assert trace.succeeded().size() == 11
            }
        }

    }

    test("metaSPAdes - single end - should fail") {

        tag "ena-portal-api"
        tag "SR"

        when {
            params {
                assembler                        = "metaspades"

                study_accession                  = "ERP012810"
                reads_accession                  = "ERR1076564"

                bwamem2_reference_genomes_folder = "${projectDir}/tests/human_phix/bwa2mem"
                blast_reference_genomes_folder   = "${projectDir}/tests/human_phix/blast"
            }
        }

        then {
            with(workflow) {
                // No contigs
                assert !success
                assert trace.failed().count{ task -> task.name.contains("SPADES") } == 1
            }
        }

    }

    test("MEGAHIT - single end - should produce an empty contigs file") {

        // TODO: fix along with - https://github.com/EBI-Metagenomics/miassembler/pull/21

        tag "ena-portal-api"
        tag "SR"

        when {
            params {
                study_accession                  = "ERP012810"
                reads_accession                  = "ERR1076564"

                bwamem2_reference_genomes_folder = "${projectDir}/tests/human_phix/bwa2mem"
                blast_reference_genomes_folder   = "${projectDir}/tests/human_phix/blast"
            }
        }

        then {
            with(workflow) {
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("MEGAHIT") } == 1
            }
        }
    }

    test("MEGAHIT - metaT - single end") {

        tag "ena-portal-api"
        tag "SR"

        when {
            params {
                study_accession                  = "DRP007622"
                reads_accession                  = "DRR280712"

                bwamem2_reference_genomes_folder = "${projectDir}/tests/human_phix/bwa2mem"
                blast_reference_genomes_folder   = "${projectDir}/tests/human_phix/blast"
            }
        }

        then {
            with(workflow) {
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 0
                assert trace.succeeded().count{ task -> task.name.contains("MEGAHIT") } == 1
                assert trace.tasks().size() == 17
            }
        }

    }

    test("Spades - metaT - single end should fail") {

        tag "ena-portal-api"
        tag "SR"

        when {
            params {
                assembler = "spades"

                study_accession                  = "DRP007622"
                reads_accession                  = "DRR280712"

                blast_reference_genomes_folder   = "${projectDir}/tests/human_phix/blast"
                bwamem2_reference_genomes_folder = "${projectDir}/tests/human_phix/bwa2mem"
            }
        }

        then {
            with(workflow) {
                assert !success
                assert trace.failed().count{ task -> task.name.contains("SPADES") } == 1
            }
        }

    }

    test("Samplesheet spades - retries") {

        tag "samplesheet"
        tag "retries"
        tag "SR"

        when {
            params {
                assembler         = "spades"
                samplesheet       = "${projectDir}/tests/samplesheet/test_mem.csv"
                assembly_memory   = 0.5
                /* Memory jumping testing */
                /* will try with [0.5GB, 0.75GB, 1.13GB, ...]
                /* which rounds down to [0, 0, 1, ...]
                /* so should definitely fail twice before succeeding. after a few trys.
                /* ~~~ */
                max_spades_retries = 5
            }
        }

        then {
            with(workflow) {
                // eventual success:
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 1

                // but failed and therefore retried multiple times first:
                assert trace.failed().count{ task -> task.name.contains("SPADES") } >= 2
            }
        }

    }

    test("Private study reads - this one should fail") {

        tag "samplesheet"
        tag "private"
        tag "SR"

        when {
            params {
                assembler     = "spades"
                samplesheet   = "${projectDir}/tests/samplesheet/test.csv"
                private_study = true
            }
        }

        // Complete this test when secrets are implemented in nf-test https://github.com/askimed/nf-test/issues/145
        then {
            with(workflow) {
                assert !success
                assert stdout.count{ line -> line.contains("Required secrets are missing") } == 1
            }
        }
    }

    test("Samplesheet long reads ONT and hifi HQ - hifi should fail") {

        tag "samplesheet"
        tag "LR"

        // we are forcing high-quality processing, but the data is in reality low-quality
        // therefore, frameshift correction is also triggered as low-quality is detected
        when {
            params {
                samplesheet                      = "${projectDir}/tests/samplesheet/test_long_reads_HQ.csv"
            }
        }

        then {
            with(workflow) {
                assert trace.succeeded().count{ task -> task.name.contains("FASTQC_BEFORE") } == 2
                assert trace.succeeded().count{ task -> task.name.contains("LONG_READS_QC:FASTP_LR") } == 2
                assert trace.succeeded().count{ task -> task.name.contains("LONG_READS_QC:MINIMAP2_ALIGN_HUMAN") } == 2
                assert trace.succeeded().count{ task -> task.name.contains("FASTQC_AFTER") } == 2
                
                assert trace.succeeded().count{ task -> task.name.contains("PACBIO_HIFI:HIFIADAPTERFILT") } == 1
                assert trace.failed().count{ task -> task.name.contains("PACBIO_HIFI:FLYE") } == 1
                
                assert trace.succeeded().count{ task -> task.name.contains("ONT_HQ:PORECHOP_ABI") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("ONT_HQ:FLYE") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("LONG_READS_ASSEMBLY_QC:MINIMAP2_ALIGN_HUMAN") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("FRAMESHIFT_CORRECTION:PROOVFRAME_MAP") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("FRAMESHIFT_CORRECTION:PROOVFRAME_FIX") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("LONG_READS_ASSEMBLY_COVERAGE:LONG_READS_COVERAGE") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("QUAST") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("LONG_READS_ASSEMBLY_COVERAGE:CALCULATE_ASSEMBLY_COVERAGE") } == 1
                
                assert trace.tasks().size() == 20

                // This process should not have been called
                assert trace.succeeded().count{ task -> task.name.contains("SHORT_READS") } == 0
            }
        }
    }

    test("hifi - success") {

        tag "ena-portal-api"
        tag "LR"

        when {
            params {
                study_accession             = "SRP384046"
                reads_accession             = "SRR19888830"
                long_reads_assembler_config = "pacbio-hifi"
            }
        }

        then {
            with(workflow) {
                assert success

                assert trace.succeeded().count{ task -> task.name.contains("FETCHTOOL_READS") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("FASTQC_BEFORE") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("LONG_READS_QC:FASTP_LR") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("LONG_READS_QC:MINIMAP2_ALIGN_HUMAN") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("FASTQC_AFTER") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("PACBIO_HIFI:HIFIADAPTERFILT") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("PACBIO_HIFI:FLYE") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("LONG_READS_ASSEMBLY_QC:MINIMAP2_ALIGN_HUMAN") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("LONG_READS_COVERAGE") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("CALCULATE_ASSEMBLY_COVERAGE") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("QUAST") } == 1

                assert trace.tasks().size() == 13
            }
        }
    }
}
