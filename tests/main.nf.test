nextflow_pipeline {

    name "Test Workflow EBIMETAGENOMICS_MIASSEMBLER"
    script "main.nf"

    test("Samplesheet spades") {

        tag "samplesheet"

        when {
            params {
                outdir = "tests/results"
                assembler = "spades"

                samplesheet                      = "${projectDir}/tests/samplesheet/test.csv"
            }
        }

        then {
            with(workflow) {
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 2
                assert trace.succeeded().count{ task -> task.name.contains("MEGAHIT") } == 1
            }
        }

    }

    test("Samplesheet - no assembled - reads filtered ") {

        tag "samplesheet"

        when {
            params {
                outdir = "tests/results"
                assembler = "spades"

                short_reads_low_reads_count_threshold = 1000000

                samplesheet                           = "${projectDir}/tests/samplesheet/test.csv"
            }
        }

        then {
            with(workflow) {
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("FASTQC_BEFORE") } == 3
                assert trace.succeeded().count{ task -> task.name.contains("FASTP") } == 3
                assert trace.succeeded().count{ task -> task.name.contains("HUMAN_PHIX_DECONTAMINATION") } == 3
                assert trace.succeeded().count{ task -> task.name.contains("FASTQC_AFTER") } == 3
                assert trace.succeeded().count{ task -> task.name.contains("CUSTOM_DUMPSOFTWAREVERSIONS") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("MULTIQC_STUDY") } == 2
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 0
                assert trace.succeeded().count{ task -> task.name.contains("MEGAHIT") } == 0
                // This process should not have been called
                assert trace.succeeded().count{ task -> task.name.contains("DOWNLOAD_FROM_FIRE") } == 0
            }
        }

    }

    test("metaSPAdes - paired end") {

        tag "ena-portal-api"

        when {

            params {
                outdir = "tests/results"

                // Force the assembly
                short_reads_filter_ratio_threshold   = 0.1

                study_accession                      = "SRP115494"
                reads_accession                      = "SRR6180434"
            }
        }

        then {
            with (workflow) {
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 1
                assert trace.succeeded().count{ task -> task.name.contains("MEGAHIT") } == 0
                assert trace.succeeded().size() == 18
            }
        }

    }

    test("MEGAHIT - paired end") {

        tag "ena-portal-api"

        when {
            params {
                outdir                              = "tests/results"
                assembler                           = "megahit"

                // Force the assembly
                short_reads_filter_ratio_threshold  = 0.1

                study_accession                     = "SRP115494"
                reads_accession                     = "SRR6180434"
            }
        }

        then {
            with(workflow) {
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 0
                assert trace.succeeded().count{ task -> task.name.contains("MEGAHIT") } == 1
                assert trace.tasks().size() == 18
            }
        }

    }

    test("metaSPAdes - single end - should fail") {

        tag "ena-portal-api"

        when {
            params {
                outdir                           = "tests/results"
                assembler                        = "metaspades"

                study_accession                  = "ERP012810"
                reads_accession                  = "ERR1076564"
            }
        }

        then {
            with(workflow) {
                // No contigs
                assert !success
                assert trace.failed().count{ task -> task.name.contains("SPADES") } == 1
            }
        }

    }

    test("MEGAHIT - single end - should fail") {

        tag "ena-portal-api"

        when {
            params {
                outdir = "tests/results"

                study_accession                  = "ERP012810"
                reads_accession                  = "ERR1076564"
            }
        }

        then {
            with(workflow) {
                assert !success
                assert trace.failed().count{ task -> task.name.contains("MEGAHIT") } == 1
            }
        }
    }

    test("MEGAHIT - metaT - single end") {

        tag "ena-portal-api"

        when {
            params {
                outdir = "tests/results"

                study_accession                  = "DRP007622"
                reads_accession                  = "DRR280712"
            }
        }

        then {
            with(workflow) {
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 0
                assert trace.succeeded().count{ task -> task.name.contains("MEGAHIT") } == 1
                assert trace.tasks().size() == 18
            }
        }

    }

    test("Spades - metaT - single end should fail") {

        tag "ena-portal-api"

        when {
            params {
                outdir = "tests/results"
                assembler = "spades"

                study_accession                  = "DRP007622"
                reads_accession                  = "DRR280712"
            }
        }

        then {
            with(workflow) {
                assert !success
                assert trace.failed().count{ task -> task.name.contains("SPADES") } == 1
            }
        }

    }

    test("Samplesheet spades - retries") {

        tag "samplesheet"
        tag "retries"

        when {
            params {
                outdir = "tests/results"
                assembler = "spades"
                samplesheet                      = "${projectDir}/tests/samplesheet/test_mem.csv"
                assembly_memory                  = 0.5
                /* Memory jumping testing */
                /* will try with [0.5GB, 0.75GB, 1.13GB, ...]
                /* which rounds down to [0, 0, 1, ...]
                /* so should definitely fail twice before succeeding. after a few trys.
                /* ~~~ */
                max_spades_retries               = 5
            }
        }

        then {
            with(workflow) {
                // eventual success:
                assert success
                assert trace.succeeded().count{ task -> task.name.contains("SPADES") } == 1

                // but failed and therefore retried multiple times first:
                assert trace.failed().count{ task -> task.name.contains("SPADES") } >= 2
            }
        }

    }

    test("Private study reads - this one should fail") {

        tag "samplesheet"
        tag "private"

        when {
            params {
                outdir = "tests/results"
                assembler = "spades"
                samplesheet                      = "${projectDir}/tests/samplesheet/test.csv"
                private_study                    = true
            }
        }

        // Complete this test when secrets are implemented in nf-test https://github.com/askimed/nf-test/issues/145
        then {
            with(workflow) {
                assert !success
                assert stdout.count{ line -> line.contains("Required secrets are missing") } == 1
            }
        }

    }

}
